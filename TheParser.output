Terminals unused in grammar

   OTHER
   COLON
   POWER
   DOUBLE
   BOOL
   FLOAT
   STRING


State 6 conflicts: 1 reduce/reduce
State 62 conflicts: 12 shift/reduce
State 95 conflicts: 12 shift/reduce
State 107 conflicts: 12 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: VarDeclList
    2        | FunDeclList

    3 VarDeclList: %empty
    4            | VarDecl VarDeclList
    5            | FunDeclList

    6 $@1: %empty

    7 VarDecl: Type ID $@1 X1

    8 X1: SEMICOLON
    9   | LEFTBRAC NUM RIGHTBRAC SEMICOLON

   10 FunDeclList: FunDecl X2

   11 X2: %empty
   12   | FunDeclList

   13 $@2: %empty

   14 FunDecl: Type ID LPARN $@2 ParamDecList RPARN Block

   15 ParamDecList: %empty
   16             | ParamDeclListTail

   17 ParamDeclListTail: ParamDecl X3

   18 ParamDecl: Type ID X4

   19 X3: %empty
   20   | COMMA ParamDeclListTail

   21 X4: %empty
   22   | LEFTBRAC RIGHTBRAC

   23 $@3: %empty

   24 Block: LEFTCURLY $@3 VarDeclList StmtList RIGHTCURLY

   25 StmtList: Stmt X5

   26 X5: %empty
   27   | StmtList

   28 Stmt: Astmt SEMICOLON
   29     | RETURNS Expr SEMICOLON
   30     | READ ID SEMICOLON
   31     | WRITE Expr SEMICOLON
   32     | WRITELN SEMICOLON
   33     | BREAK SEMICOLON
   34     | IF LPARN Expr RPARN Stmt ELSE Stmt
   35     | WHILE LPARN Expr RPARN Stmt
   36     | Block

   37 Astmt: ID X7

   38 Expr: Primary X6
   39     | UnaryOp Expr X6

   40 X6: %empty
   41   | BinOp Expr X6

   42 X7: EQUAL Expr X6
   43   | LEFTBRAC Expr RIGHTBRAC EQUAL Expr X6

   44 Primary: ID X8
   45        | NUM
   46        | LPARN Expr RPARN

   47 X8: %empty
   48   | LPARN ExprList RPARN
   49   | LEFTBRAC Expr RIGHTBRAC

   50 ExprList: %empty
   51         | ExprListTail

   52 ExprListTail: Expr X9

   53 X9: %empty
   54   | COMMA ExprListTail

   55 UnaryOp: MINUS
   56        | EXCLAMATIONPT

   57 BinOp: ADD
   58      | MINUS
   59      | MUL
   60      | DIV
   61      | EQUALS
   62      | NOTEQUAL
   63      | GREATERTHAN
   64      | GREATERTHANOREQ
   65      | LESSTHAN
   66      | LESSTHANOREQ
   67      | AND
   68      | OR

   69 Type: INT
   70     | CHAR


Terminals, with rules where they appear

$end (0) 0
error (256)
NUM (258) 9 45
OTHER (259)
SEMICOLON (260) 8 9 28 29 30 31 32 33
IF (261) 34
WRITELN (262) 32
WRITE (263) 31
WHILE (264) 35
ELSE (265) 34
RETURNS (266) 29
BREAK (267) 33
READ (268) 30
COMMA (269) 20 54
COLON (270)
LPARN (271) 14 34 35 46 48
RPARN (272) 14 34 35 46 48
LEFTBRAC (273) 9 22 43 49
RIGHTBRAC (274) 9 22 43 49
LEFTCURLY (275) 24
RIGHTCURLY (276) 24
ADD (277) 57
MINUS (278) 55 58
MUL (279) 59
DIV (280) 60
EQUAL (281) 42 43
EQUALS (282) 61
NOTEQUAL (283) 62
LESSTHAN (284) 65
LESSTHANOREQ (285) 66
GREATERTHAN (286) 63
GREATERTHANOREQ (287) 64
AND (288) 67
OR (289) 68
EXCLAMATIONPT (290) 56
POWER (291)
ID (292) 7 14 18 30 37 44
CHAR (293) 70
INT (294) 69
DOUBLE (295)
BOOL (296)
FLOAT (297)
STRING (298)


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
Program (45)
    on left: 1 2, on right: 0
VarDeclList (46)
    on left: 3 4 5, on right: 1 4 24
VarDecl (47)
    on left: 7, on right: 4
$@1 (48)
    on left: 6, on right: 7
X1 (49)
    on left: 8 9, on right: 7
FunDeclList (50)
    on left: 10, on right: 2 5 12
X2 (51)
    on left: 11 12, on right: 10
FunDecl (52)
    on left: 14, on right: 10
$@2 (53)
    on left: 13, on right: 14
ParamDecList (54)
    on left: 15 16, on right: 14
ParamDeclListTail (55)
    on left: 17, on right: 16 20
ParamDecl (56)
    on left: 18, on right: 17
X3 (57)
    on left: 19 20, on right: 17
X4 (58)
    on left: 21 22, on right: 18
Block (59)
    on left: 24, on right: 14 36
$@3 (60)
    on left: 23, on right: 24
StmtList (61)
    on left: 25, on right: 24 27
X5 (62)
    on left: 26 27, on right: 25
Stmt (63)
    on left: 28 29 30 31 32 33 34 35 36, on right: 25 34 35
Astmt (64)
    on left: 37, on right: 28
Expr (65)
    on left: 38 39, on right: 29 31 34 35 39 41 42 43 46 49 52
X6 (66)
    on left: 40 41, on right: 38 39 41 42 43
X7 (67)
    on left: 42 43, on right: 37
Primary (68)
    on left: 44 45 46, on right: 38
X8 (69)
    on left: 47 48 49, on right: 44
ExprList (70)
    on left: 50 51, on right: 48
ExprListTail (71)
    on left: 52, on right: 51 54
X9 (72)
    on left: 53 54, on right: 52
UnaryOp (73)
    on left: 55 56, on right: 39
BinOp (74)
    on left: 57 58 59 60 61 62 63 64 65 66 67 68, on right: 41
Type (75)
    on left: 69 70, on right: 7 14 18


State 0

    0 $accept: . Program $end

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2

    $default  reduce using rule 3 (VarDeclList)

    Program      go to state 3
    VarDeclList  go to state 4
    VarDecl      go to state 5
    FunDeclList  go to state 6
    FunDecl      go to state 7
    Type         go to state 8


State 1

   70 Type: CHAR .

    $default  reduce using rule 70 (Type)


State 2

   69 Type: INT .

    $default  reduce using rule 69 (Type)


State 3

    0 $accept: Program . $end

    $end  shift, and go to state 9


State 4

    1 Program: VarDeclList .

    $default  reduce using rule 1 (Program)


State 5

    4 VarDeclList: VarDecl . VarDeclList

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2

    $default  reduce using rule 3 (VarDeclList)

    VarDeclList  go to state 10
    VarDecl      go to state 5
    FunDeclList  go to state 11
    FunDecl      go to state 7
    Type         go to state 8


State 6

    2 Program: FunDeclList .
    5 VarDeclList: FunDeclList .

    $end      reduce using rule 2 (Program)
    $end      [reduce using rule 5 (VarDeclList)]
    $default  reduce using rule 2 (Program)


State 7

   10 FunDeclList: FunDecl . X2

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2

    $default  reduce using rule 11 (X2)

    FunDeclList  go to state 12
    X2           go to state 13
    FunDecl      go to state 7
    Type         go to state 14


State 8

    7 VarDecl: Type . ID $@1 X1
   14 FunDecl: Type . ID LPARN $@2 ParamDecList RPARN Block

    ID  shift, and go to state 15


State 9

    0 $accept: Program $end .

    $default  accept


State 10

    4 VarDeclList: VarDecl VarDeclList .

    $default  reduce using rule 4 (VarDeclList)


State 11

    5 VarDeclList: FunDeclList .

    $default  reduce using rule 5 (VarDeclList)


State 12

   12 X2: FunDeclList .

    $default  reduce using rule 12 (X2)


State 13

   10 FunDeclList: FunDecl X2 .

    $default  reduce using rule 10 (FunDeclList)


State 14

   14 FunDecl: Type . ID LPARN $@2 ParamDecList RPARN Block

    ID  shift, and go to state 16


State 15

    7 VarDecl: Type ID . $@1 X1
   14 FunDecl: Type ID . LPARN $@2 ParamDecList RPARN Block

    LPARN  shift, and go to state 17

    $default  reduce using rule 6 ($@1)

    $@1  go to state 18


State 16

   14 FunDecl: Type ID . LPARN $@2 ParamDecList RPARN Block

    LPARN  shift, and go to state 17


State 17

   14 FunDecl: Type ID LPARN . $@2 ParamDecList RPARN Block

    $default  reduce using rule 13 ($@2)

    $@2  go to state 19


State 18

    7 VarDecl: Type ID $@1 . X1

    SEMICOLON  shift, and go to state 20
    LEFTBRAC   shift, and go to state 21

    X1  go to state 22


State 19

   14 FunDecl: Type ID LPARN $@2 . ParamDecList RPARN Block

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2

    $default  reduce using rule 15 (ParamDecList)

    ParamDecList       go to state 23
    ParamDeclListTail  go to state 24
    ParamDecl          go to state 25
    Type               go to state 26


State 20

    8 X1: SEMICOLON .

    $default  reduce using rule 8 (X1)


State 21

    9 X1: LEFTBRAC . NUM RIGHTBRAC SEMICOLON

    NUM  shift, and go to state 27


State 22

    7 VarDecl: Type ID $@1 X1 .

    $default  reduce using rule 7 (VarDecl)


State 23

   14 FunDecl: Type ID LPARN $@2 ParamDecList . RPARN Block

    RPARN  shift, and go to state 28


State 24

   16 ParamDecList: ParamDeclListTail .

    $default  reduce using rule 16 (ParamDecList)


State 25

   17 ParamDeclListTail: ParamDecl . X3

    COMMA  shift, and go to state 29

    $default  reduce using rule 19 (X3)

    X3  go to state 30


State 26

   18 ParamDecl: Type . ID X4

    ID  shift, and go to state 31


State 27

    9 X1: LEFTBRAC NUM . RIGHTBRAC SEMICOLON

    RIGHTBRAC  shift, and go to state 32


State 28

   14 FunDecl: Type ID LPARN $@2 ParamDecList RPARN . Block

    LEFTCURLY  shift, and go to state 33

    Block  go to state 34


State 29

   20 X3: COMMA . ParamDeclListTail

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2

    ParamDeclListTail  go to state 35
    ParamDecl          go to state 25
    Type               go to state 26


State 30

   17 ParamDeclListTail: ParamDecl X3 .

    $default  reduce using rule 17 (ParamDeclListTail)


State 31

   18 ParamDecl: Type ID . X4

    LEFTBRAC  shift, and go to state 36

    $default  reduce using rule 21 (X4)

    X4  go to state 37


State 32

    9 X1: LEFTBRAC NUM RIGHTBRAC . SEMICOLON

    SEMICOLON  shift, and go to state 38


State 33

   24 Block: LEFTCURLY . $@3 VarDeclList StmtList RIGHTCURLY

    $default  reduce using rule 23 ($@3)

    $@3  go to state 39


State 34

   14 FunDecl: Type ID LPARN $@2 ParamDecList RPARN Block .

    $default  reduce using rule 14 (FunDecl)


State 35

   20 X3: COMMA ParamDeclListTail .

    $default  reduce using rule 20 (X3)


State 36

   22 X4: LEFTBRAC . RIGHTBRAC

    RIGHTBRAC  shift, and go to state 40


State 37

   18 ParamDecl: Type ID X4 .

    $default  reduce using rule 18 (ParamDecl)


State 38

    9 X1: LEFTBRAC NUM RIGHTBRAC SEMICOLON .

    $default  reduce using rule 9 (X1)


State 39

   24 Block: LEFTCURLY $@3 . VarDeclList StmtList RIGHTCURLY

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2

    $default  reduce using rule 3 (VarDeclList)

    VarDeclList  go to state 41
    VarDecl      go to state 5
    FunDeclList  go to state 11
    FunDecl      go to state 7
    Type         go to state 8


State 40

   22 X4: LEFTBRAC RIGHTBRAC .

    $default  reduce using rule 22 (X4)


State 41

   24 Block: LEFTCURLY $@3 VarDeclList . StmtList RIGHTCURLY

    IF         shift, and go to state 42
    WRITELN    shift, and go to state 43
    WRITE      shift, and go to state 44
    WHILE      shift, and go to state 45
    RETURNS    shift, and go to state 46
    BREAK      shift, and go to state 47
    READ       shift, and go to state 48
    LEFTCURLY  shift, and go to state 33
    ID         shift, and go to state 49

    Block     go to state 50
    StmtList  go to state 51
    Stmt      go to state 52
    Astmt     go to state 53


State 42

   34 Stmt: IF . LPARN Expr RPARN Stmt ELSE Stmt

    LPARN  shift, and go to state 54


State 43

   32 Stmt: WRITELN . SEMICOLON

    SEMICOLON  shift, and go to state 55


State 44

   31 Stmt: WRITE . Expr SEMICOLON

    NUM            shift, and go to state 56
    LPARN          shift, and go to state 57
    MINUS          shift, and go to state 58
    EXCLAMATIONPT  shift, and go to state 59
    ID             shift, and go to state 60

    Expr     go to state 61
    Primary  go to state 62
    UnaryOp  go to state 63


State 45

   35 Stmt: WHILE . LPARN Expr RPARN Stmt

    LPARN  shift, and go to state 64


State 46

   29 Stmt: RETURNS . Expr SEMICOLON

    NUM            shift, and go to state 56
    LPARN          shift, and go to state 57
    MINUS          shift, and go to state 58
    EXCLAMATIONPT  shift, and go to state 59
    ID             shift, and go to state 60

    Expr     go to state 65
    Primary  go to state 62
    UnaryOp  go to state 63


State 47

   33 Stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 66


State 48

   30 Stmt: READ . ID SEMICOLON

    ID  shift, and go to state 67


State 49

   37 Astmt: ID . X7

    LEFTBRAC  shift, and go to state 68
    EQUAL     shift, and go to state 69

    X7  go to state 70


State 50

   36 Stmt: Block .

    $default  reduce using rule 36 (Stmt)


State 51

   24 Block: LEFTCURLY $@3 VarDeclList StmtList . RIGHTCURLY

    RIGHTCURLY  shift, and go to state 71


State 52

   25 StmtList: Stmt . X5

    IF         shift, and go to state 42
    WRITELN    shift, and go to state 43
    WRITE      shift, and go to state 44
    WHILE      shift, and go to state 45
    RETURNS    shift, and go to state 46
    BREAK      shift, and go to state 47
    READ       shift, and go to state 48
    LEFTCURLY  shift, and go to state 33
    ID         shift, and go to state 49

    $default  reduce using rule 26 (X5)

    Block     go to state 50
    StmtList  go to state 72
    X5        go to state 73
    Stmt      go to state 52
    Astmt     go to state 53


State 53

   28 Stmt: Astmt . SEMICOLON

    SEMICOLON  shift, and go to state 74


State 54

   34 Stmt: IF LPARN . Expr RPARN Stmt ELSE Stmt

    NUM            shift, and go to state 56
    LPARN          shift, and go to state 57
    MINUS          shift, and go to state 58
    EXCLAMATIONPT  shift, and go to state 59
    ID             shift, and go to state 60

    Expr     go to state 75
    Primary  go to state 62
    UnaryOp  go to state 63


State 55

   32 Stmt: WRITELN SEMICOLON .

    $default  reduce using rule 32 (Stmt)


State 56

   45 Primary: NUM .

    $default  reduce using rule 45 (Primary)


State 57

   46 Primary: LPARN . Expr RPARN

    NUM            shift, and go to state 56
    LPARN          shift, and go to state 57
    MINUS          shift, and go to state 58
    EXCLAMATIONPT  shift, and go to state 59
    ID             shift, and go to state 60

    Expr     go to state 76
    Primary  go to state 62
    UnaryOp  go to state 63


State 58

   55 UnaryOp: MINUS .

    $default  reduce using rule 55 (UnaryOp)


State 59

   56 UnaryOp: EXCLAMATIONPT .

    $default  reduce using rule 56 (UnaryOp)


State 60

   44 Primary: ID . X8

    LPARN     shift, and go to state 77
    LEFTBRAC  shift, and go to state 78

    $default  reduce using rule 47 (X8)

    X8  go to state 79


State 61

   31 Stmt: WRITE Expr . SEMICOLON

    SEMICOLON  shift, and go to state 80


State 62

   38 Expr: Primary . X6

    ADD              shift, and go to state 81
    MINUS            shift, and go to state 82
    MUL              shift, and go to state 83
    DIV              shift, and go to state 84
    EQUALS           shift, and go to state 85
    NOTEQUAL         shift, and go to state 86
    LESSTHAN         shift, and go to state 87
    LESSTHANOREQ     shift, and go to state 88
    GREATERTHAN      shift, and go to state 89
    GREATERTHANOREQ  shift, and go to state 90
    AND              shift, and go to state 91
    OR               shift, and go to state 92

    ADD              [reduce using rule 40 (X6)]
    MINUS            [reduce using rule 40 (X6)]
    MUL              [reduce using rule 40 (X6)]
    DIV              [reduce using rule 40 (X6)]
    EQUALS           [reduce using rule 40 (X6)]
    NOTEQUAL         [reduce using rule 40 (X6)]
    LESSTHAN         [reduce using rule 40 (X6)]
    LESSTHANOREQ     [reduce using rule 40 (X6)]
    GREATERTHAN      [reduce using rule 40 (X6)]
    GREATERTHANOREQ  [reduce using rule 40 (X6)]
    AND              [reduce using rule 40 (X6)]
    OR               [reduce using rule 40 (X6)]
    $default         reduce using rule 40 (X6)

    X6     go to state 93
    BinOp  go to state 94


State 63

   39 Expr: UnaryOp . Expr X6

    NUM            shift, and go to state 56
    LPARN          shift, and go to state 57
    MINUS          shift, and go to state 58
    EXCLAMATIONPT  shift, and go to state 59
    ID             shift, and go to state 60

    Expr     go to state 95
    Primary  go to state 62
    UnaryOp  go to state 63


State 64

   35 Stmt: WHILE LPARN . Expr RPARN Stmt

    NUM            shift, and go to state 56
    LPARN          shift, and go to state 57
    MINUS          shift, and go to state 58
    EXCLAMATIONPT  shift, and go to state 59
    ID             shift, and go to state 60

    Expr     go to state 96
    Primary  go to state 62
    UnaryOp  go to state 63


State 65

   29 Stmt: RETURNS Expr . SEMICOLON

    SEMICOLON  shift, and go to state 97


State 66

   33 Stmt: BREAK SEMICOLON .

    $default  reduce using rule 33 (Stmt)


State 67

   30 Stmt: READ ID . SEMICOLON

    SEMICOLON  shift, and go to state 98


State 68

   43 X7: LEFTBRAC . Expr RIGHTBRAC EQUAL Expr X6

    NUM            shift, and go to state 56
    LPARN          shift, and go to state 57
    MINUS          shift, and go to state 58
    EXCLAMATIONPT  shift, and go to state 59
    ID             shift, and go to state 60

    Expr     go to state 99
    Primary  go to state 62
    UnaryOp  go to state 63


State 69

   42 X7: EQUAL . Expr X6

    NUM            shift, and go to state 56
    LPARN          shift, and go to state 57
    MINUS          shift, and go to state 58
    EXCLAMATIONPT  shift, and go to state 59
    ID             shift, and go to state 60

    Expr     go to state 100
    Primary  go to state 62
    UnaryOp  go to state 63


State 70

   37 Astmt: ID X7 .

    $default  reduce using rule 37 (Astmt)


State 71

   24 Block: LEFTCURLY $@3 VarDeclList StmtList RIGHTCURLY .

    $default  reduce using rule 24 (Block)


State 72

   27 X5: StmtList .

    $default  reduce using rule 27 (X5)


State 73

   25 StmtList: Stmt X5 .

    $default  reduce using rule 25 (StmtList)


State 74

   28 Stmt: Astmt SEMICOLON .

    $default  reduce using rule 28 (Stmt)


State 75

   34 Stmt: IF LPARN Expr . RPARN Stmt ELSE Stmt

    RPARN  shift, and go to state 101


State 76

   46 Primary: LPARN Expr . RPARN

    RPARN  shift, and go to state 102


State 77

   48 X8: LPARN . ExprList RPARN

    NUM            shift, and go to state 56
    LPARN          shift, and go to state 57
    MINUS          shift, and go to state 58
    EXCLAMATIONPT  shift, and go to state 59
    ID             shift, and go to state 60

    $default  reduce using rule 50 (ExprList)

    Expr          go to state 103
    Primary       go to state 62
    ExprList      go to state 104
    ExprListTail  go to state 105
    UnaryOp       go to state 63


State 78

   49 X8: LEFTBRAC . Expr RIGHTBRAC

    NUM            shift, and go to state 56
    LPARN          shift, and go to state 57
    MINUS          shift, and go to state 58
    EXCLAMATIONPT  shift, and go to state 59
    ID             shift, and go to state 60

    Expr     go to state 106
    Primary  go to state 62
    UnaryOp  go to state 63


State 79

   44 Primary: ID X8 .

    $default  reduce using rule 44 (Primary)


State 80

   31 Stmt: WRITE Expr SEMICOLON .

    $default  reduce using rule 31 (Stmt)


State 81

   57 BinOp: ADD .

    $default  reduce using rule 57 (BinOp)


State 82

   58 BinOp: MINUS .

    $default  reduce using rule 58 (BinOp)


State 83

   59 BinOp: MUL .

    $default  reduce using rule 59 (BinOp)


State 84

   60 BinOp: DIV .

    $default  reduce using rule 60 (BinOp)


State 85

   61 BinOp: EQUALS .

    $default  reduce using rule 61 (BinOp)


State 86

   62 BinOp: NOTEQUAL .

    $default  reduce using rule 62 (BinOp)


State 87

   65 BinOp: LESSTHAN .

    $default  reduce using rule 65 (BinOp)


State 88

   66 BinOp: LESSTHANOREQ .

    $default  reduce using rule 66 (BinOp)


State 89

   63 BinOp: GREATERTHAN .

    $default  reduce using rule 63 (BinOp)


State 90

   64 BinOp: GREATERTHANOREQ .

    $default  reduce using rule 64 (BinOp)


State 91

   67 BinOp: AND .

    $default  reduce using rule 67 (BinOp)


State 92

   68 BinOp: OR .

    $default  reduce using rule 68 (BinOp)


State 93

   38 Expr: Primary X6 .

    $default  reduce using rule 38 (Expr)


State 94

   41 X6: BinOp . Expr X6

    NUM            shift, and go to state 56
    LPARN          shift, and go to state 57
    MINUS          shift, and go to state 58
    EXCLAMATIONPT  shift, and go to state 59
    ID             shift, and go to state 60

    Expr     go to state 107
    Primary  go to state 62
    UnaryOp  go to state 63


State 95

   39 Expr: UnaryOp Expr . X6

    ADD              shift, and go to state 81
    MINUS            shift, and go to state 82
    MUL              shift, and go to state 83
    DIV              shift, and go to state 84
    EQUALS           shift, and go to state 85
    NOTEQUAL         shift, and go to state 86
    LESSTHAN         shift, and go to state 87
    LESSTHANOREQ     shift, and go to state 88
    GREATERTHAN      shift, and go to state 89
    GREATERTHANOREQ  shift, and go to state 90
    AND              shift, and go to state 91
    OR               shift, and go to state 92

    ADD              [reduce using rule 40 (X6)]
    MINUS            [reduce using rule 40 (X6)]
    MUL              [reduce using rule 40 (X6)]
    DIV              [reduce using rule 40 (X6)]
    EQUALS           [reduce using rule 40 (X6)]
    NOTEQUAL         [reduce using rule 40 (X6)]
    LESSTHAN         [reduce using rule 40 (X6)]
    LESSTHANOREQ     [reduce using rule 40 (X6)]
    GREATERTHAN      [reduce using rule 40 (X6)]
    GREATERTHANOREQ  [reduce using rule 40 (X6)]
    AND              [reduce using rule 40 (X6)]
    OR               [reduce using rule 40 (X6)]
    $default         reduce using rule 40 (X6)

    X6     go to state 108
    BinOp  go to state 94


State 96

   35 Stmt: WHILE LPARN Expr . RPARN Stmt

    RPARN  shift, and go to state 109


State 97

   29 Stmt: RETURNS Expr SEMICOLON .

    $default  reduce using rule 29 (Stmt)


State 98

   30 Stmt: READ ID SEMICOLON .

    $default  reduce using rule 30 (Stmt)


State 99

   43 X7: LEFTBRAC Expr . RIGHTBRAC EQUAL Expr X6

    RIGHTBRAC  shift, and go to state 110


State 100

   42 X7: EQUAL Expr . X6

    ADD              shift, and go to state 81
    MINUS            shift, and go to state 82
    MUL              shift, and go to state 83
    DIV              shift, and go to state 84
    EQUALS           shift, and go to state 85
    NOTEQUAL         shift, and go to state 86
    LESSTHAN         shift, and go to state 87
    LESSTHANOREQ     shift, and go to state 88
    GREATERTHAN      shift, and go to state 89
    GREATERTHANOREQ  shift, and go to state 90
    AND              shift, and go to state 91
    OR               shift, and go to state 92

    $default  reduce using rule 40 (X6)

    X6     go to state 111
    BinOp  go to state 94


State 101

   34 Stmt: IF LPARN Expr RPARN . Stmt ELSE Stmt

    IF         shift, and go to state 42
    WRITELN    shift, and go to state 43
    WRITE      shift, and go to state 44
    WHILE      shift, and go to state 45
    RETURNS    shift, and go to state 46
    BREAK      shift, and go to state 47
    READ       shift, and go to state 48
    LEFTCURLY  shift, and go to state 33
    ID         shift, and go to state 49

    Block  go to state 50
    Stmt   go to state 112
    Astmt  go to state 53


State 102

   46 Primary: LPARN Expr RPARN .

    $default  reduce using rule 46 (Primary)


State 103

   52 ExprListTail: Expr . X9

    COMMA  shift, and go to state 113

    $default  reduce using rule 53 (X9)

    X9  go to state 114


State 104

   48 X8: LPARN ExprList . RPARN

    RPARN  shift, and go to state 115


State 105

   51 ExprList: ExprListTail .

    $default  reduce using rule 51 (ExprList)


State 106

   49 X8: LEFTBRAC Expr . RIGHTBRAC

    RIGHTBRAC  shift, and go to state 116


State 107

   41 X6: BinOp Expr . X6

    ADD              shift, and go to state 81
    MINUS            shift, and go to state 82
    MUL              shift, and go to state 83
    DIV              shift, and go to state 84
    EQUALS           shift, and go to state 85
    NOTEQUAL         shift, and go to state 86
    LESSTHAN         shift, and go to state 87
    LESSTHANOREQ     shift, and go to state 88
    GREATERTHAN      shift, and go to state 89
    GREATERTHANOREQ  shift, and go to state 90
    AND              shift, and go to state 91
    OR               shift, and go to state 92

    ADD              [reduce using rule 40 (X6)]
    MINUS            [reduce using rule 40 (X6)]
    MUL              [reduce using rule 40 (X6)]
    DIV              [reduce using rule 40 (X6)]
    EQUALS           [reduce using rule 40 (X6)]
    NOTEQUAL         [reduce using rule 40 (X6)]
    LESSTHAN         [reduce using rule 40 (X6)]
    LESSTHANOREQ     [reduce using rule 40 (X6)]
    GREATERTHAN      [reduce using rule 40 (X6)]
    GREATERTHANOREQ  [reduce using rule 40 (X6)]
    AND              [reduce using rule 40 (X6)]
    OR               [reduce using rule 40 (X6)]
    $default         reduce using rule 40 (X6)

    X6     go to state 117
    BinOp  go to state 94


State 108

   39 Expr: UnaryOp Expr X6 .

    $default  reduce using rule 39 (Expr)


State 109

   35 Stmt: WHILE LPARN Expr RPARN . Stmt

    IF         shift, and go to state 42
    WRITELN    shift, and go to state 43
    WRITE      shift, and go to state 44
    WHILE      shift, and go to state 45
    RETURNS    shift, and go to state 46
    BREAK      shift, and go to state 47
    READ       shift, and go to state 48
    LEFTCURLY  shift, and go to state 33
    ID         shift, and go to state 49

    Block  go to state 50
    Stmt   go to state 118
    Astmt  go to state 53


State 110

   43 X7: LEFTBRAC Expr RIGHTBRAC . EQUAL Expr X6

    EQUAL  shift, and go to state 119


State 111

   42 X7: EQUAL Expr X6 .

    $default  reduce using rule 42 (X7)


State 112

   34 Stmt: IF LPARN Expr RPARN Stmt . ELSE Stmt

    ELSE  shift, and go to state 120


State 113

   54 X9: COMMA . ExprListTail

    NUM            shift, and go to state 56
    LPARN          shift, and go to state 57
    MINUS          shift, and go to state 58
    EXCLAMATIONPT  shift, and go to state 59
    ID             shift, and go to state 60

    Expr          go to state 103
    Primary       go to state 62
    ExprListTail  go to state 121
    UnaryOp       go to state 63


State 114

   52 ExprListTail: Expr X9 .

    $default  reduce using rule 52 (ExprListTail)


State 115

   48 X8: LPARN ExprList RPARN .

    $default  reduce using rule 48 (X8)


State 116

   49 X8: LEFTBRAC Expr RIGHTBRAC .

    $default  reduce using rule 49 (X8)


State 117

   41 X6: BinOp Expr X6 .

    $default  reduce using rule 41 (X6)


State 118

   35 Stmt: WHILE LPARN Expr RPARN Stmt .

    $default  reduce using rule 35 (Stmt)


State 119

   43 X7: LEFTBRAC Expr RIGHTBRAC EQUAL . Expr X6

    NUM            shift, and go to state 56
    LPARN          shift, and go to state 57
    MINUS          shift, and go to state 58
    EXCLAMATIONPT  shift, and go to state 59
    ID             shift, and go to state 60

    Expr     go to state 122
    Primary  go to state 62
    UnaryOp  go to state 63


State 120

   34 Stmt: IF LPARN Expr RPARN Stmt ELSE . Stmt

    IF         shift, and go to state 42
    WRITELN    shift, and go to state 43
    WRITE      shift, and go to state 44
    WHILE      shift, and go to state 45
    RETURNS    shift, and go to state 46
    BREAK      shift, and go to state 47
    READ       shift, and go to state 48
    LEFTCURLY  shift, and go to state 33
    ID         shift, and go to state 49

    Block  go to state 50
    Stmt   go to state 123
    Astmt  go to state 53


State 121

   54 X9: COMMA ExprListTail .

    $default  reduce using rule 54 (X9)


State 122

   43 X7: LEFTBRAC Expr RIGHTBRAC EQUAL Expr . X6

    ADD              shift, and go to state 81
    MINUS            shift, and go to state 82
    MUL              shift, and go to state 83
    DIV              shift, and go to state 84
    EQUALS           shift, and go to state 85
    NOTEQUAL         shift, and go to state 86
    LESSTHAN         shift, and go to state 87
    LESSTHANOREQ     shift, and go to state 88
    GREATERTHAN      shift, and go to state 89
    GREATERTHANOREQ  shift, and go to state 90
    AND              shift, and go to state 91
    OR               shift, and go to state 92

    $default  reduce using rule 40 (X6)

    X6     go to state 124
    BinOp  go to state 94


State 123

   34 Stmt: IF LPARN Expr RPARN Stmt ELSE Stmt .

    $default  reduce using rule 34 (Stmt)


State 124

   43 X7: LEFTBRAC Expr RIGHTBRAC EQUAL Expr X6 .

    $default  reduce using rule 43 (X7)
